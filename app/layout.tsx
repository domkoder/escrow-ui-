'use client'
import React from 'react'
import {
	ConnectionProvider,
	WalletProvider,
} from '@solana/wallet-adapter-react'
import { WalletAdapterNetwork } from '@solana/wallet-adapter-base'
import { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-wallets'
import {
	WalletModalProvider,
	WalletDisconnectButton,
	WalletMultiButton,
} from '@solana/wallet-adapter-react-ui'
import { ThemeProvider } from '@/components/theme-provider'
import { clusterApiUrl } from '@solana/web3.js'
// import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
// Default styles that can be overridden by your app
import '@solana/wallet-adapter-react-ui/styles.css'
import { Navbar } from '@/components/nav'

const inter = Inter({ subsets: ['latin'] })

// export const metadata: Metadata = {
// 	title: 'Create Next App',
// 	description: 'Generated by create next app',
// }

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode
}>) {
	// The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.
	const network = WalletAdapterNetwork.Devnet

	// You can also provide a custom RPC endpoint.
	const endpoint = React.useMemo(() => clusterApiUrl(network), [network])

	const wallets = React.useMemo(
		() => [
			/**
			 * Wallets that implement either of these standards will be available automatically.
			 *
			 *   - Solana Mobile Stack Mobile Wallet Adapter Protocol
			 *     (https://github.com/solana-mobile/mobile-wallet-adapter)
			 *   - Solana Wallet Standard
			 *     (https://github.com/anza-xyz/wallet-standard)
			 *
			 * If you wish to support a wallet that supports neither of those standards,
			 * instantiate its legacy wallet adapter here. Common legacy adapters can be found
			 * in the npm package `@solana/wallet-adapter-wallets`.
			 */
			new UnsafeBurnerWalletAdapter(),
		],
		// eslint-disable-next-line react-hooks/exhaustive-deps
		[network]
	)

	return (
		<html lang="en">
			<body className={inter.className}>
				<ThemeProvider>
					<ConnectionProvider endpoint={endpoint}>
						<WalletProvider wallets={wallets} autoConnect>
							<WalletModalProvider>
								<Navbar />
								{children}
							</WalletModalProvider>
						</WalletProvider>
					</ConnectionProvider>
				</ThemeProvider>
			</body>
		</html>
	)
}
